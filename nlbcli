#!/usr/bin/env python3

# built-in
import argparse
import sys
import getpass
import os
import pickle

# external pkgs
import requests as r
import bs4 as bs


parser = argparse.ArgumentParser()
parser.add_argument('command', choices=[
                    "login", "balance", "allbalances"])
# parser.add_argument('login', help='Prompts you for your NLBKlik username/password and remembers them.')
# parser.add_argument('balance', help='Prints the balance on all your accounts')
args = parser.parse_args()

# Unfortunately, NLB's certificate is invalid, as it's not including an intermediate
# certificate from the chain. For this PoC we're skipping the validation altogether.
#
# TODO: replace with cert from https://gist.github.com/filipArena/d73026ea38df5c4bb6263b1a268723c1
# Thanks filipd!
VERIFY_SSL = False
NLBCLI_USER_FOLDER_PATH = os.path.expanduser('~/.nlbcli')
CREDENTIALS_FILE_PATH = os.path.join(NLBCLI_USER_FOLDER_PATH, 'credentials')
SESSION_FILE_PATH = os.path.join(NLBCLI_USER_FOLDER_PATH, 'session')


if not os.path.exists(NLBCLI_USER_FOLDER_PATH):
    os.makedirs(NLBCLI_USER_FOLDER_PATH)
    print("Info: ~/.nlbcli folder didn't exist, created it now.")


sess_global = None


def save_session_to_file():
    with open(SESSION_FILE_PATH, 'wb') as session_file:
        pickle.dump(sess_global, session_file)


def load_session_from_file():
    global sess_global
    with open(SESSION_FILE_PATH, 'rb') as session_file:
        sess_global = pickle.load(session_file)


if os.path.exists(SESSION_FILE_PATH):
    load_session_from_file()


def login_redirect_detected(response):
    """ Redirects toward the login page will have a history (302 redirection)
    which will contain the URL of the login page."""
    return response.history and '/Account/Login' in response.history[0].text


def load_credentials_from_file():
    if not os.path.exists(CREDENTIALS_FILE_PATH):
        print('Error: credentails file not found. Try running `nlbcli login` first.')
        exit(1)
    with open(CREDENTIALS_FILE_PATH, 'r') as credentials_file:
        return credentials_file.read().split('\n')


def save_credentials_to_file(username, password):
    with open(CREDENTIALS_FILE_PATH, 'w') as credentials_file:
        credentials_file.write(username + '\n' + password)


def login_with_saved_credentials():
    global sess_global
    username, password = load_credentials_from_file()
    sess = r.Session()
    data = {"UserName": username, "Password": password,
            "X-Requested-With": "XMLHttpRequest"}
    sess.post(
        'https://www.nlbklik.com.mk/Account/LoginUserNamePassword', data=data, verify=VERIFY_SSL)
    sess_global = sess
    save_session_to_file()


def fetch_retry_on_logout(request_func):
    if not sess_global:
        print('Info: no session detected, attempting to log in first')
        login_with_saved_credentials()
    response = request_func()
    if login_redirect_detected(response):
        print('Info: logout detected, attempting to log in with saved credentials')
        login_with_saved_credentials()
        return request_func()  # retry after login
    else:
        return response  # return original response


if args.command == 'login':
    username = input('Username: ')
    password = getpass.getpass('Password: ')
    save_credentials_to_file(username, password)
    sess_global = r.Session()
    data = {"UserName": username, "Password": password,
            "X-Requested-With": "XMLHttpRequest"}
    login_res = sess_global.post(
        'https://www.nlbklik.com.mk/Account/LoginUserNamePassword', data=data, verify=VERIFY_SSL)

    # TODO: handle failed login
    save_session_to_file()

    print('Info: logged in successfully; saved credentials and session data.')

elif args.command == 'balance':
    def balance_req():
        return sess_global.get('https://www.nlbklik.com.mk/Retail/Account', verify=VERIFY_SSL)
    response = fetch_retry_on_logout(balance_req)
    soup = bs.BeautifulSoup(response.text, 'html.parser')
    for el in soup.select('.widget-main .row'):
        print(el.get_text())


elif args.command == 'allbalances':
    def allbalances_req():
        return sess_global.post(
            'https://www.nlbklik.com.mk/Home/AllBalances', verify=VERIFY_SSL)
    response = fetch_retry_on_logout(allbalances_req)
    soup = bs.BeautifulSoup(
        '<html><body>' + response.text + '</body></html>', 'html.parser')

    found = False
    for el in soup.select('.table-responsive > table > tbody > tr'):
        if (el.get('class') == 'collapse'):
            continue

        tdname = el.find('td')

        tdimg = tdname.find_next_sibling()
        if (tdimg == None):
            continue

        divnum = tdname.find('div')
        divname = divnum.find_next_sibling()

        accnum = divnum.get_text().strip()
        accname = divname.get_text().strip()

        iscard = accname.find('Трансакциска') == -1

        print("Number: " + accnum)
        print(('Card Name: ' if iscard == True else 'Account Name: ') + accname)

        tdbalance = tdimg.find_next_sibling()
        balanceval = tdbalance.get_text().strip()
        print("Balance: " + balanceval)

        tdother = tdbalance.find_next_sibling()
        otherval = tdother.get_text().strip()
        print(('Available: ' if iscard == True else 'Last Change: ') + otherval)

        found = True
        print('')

    if (found == False):
        print("DID NOT FIND ANYTHING, PROBABLY NOT LOGGED IN!")
